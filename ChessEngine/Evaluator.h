#pragma once

#include "State.h"
#include <unordered_map>

class Evaluator {
    static constexpr double MAXIMUM_EVALUATION = 103;
    static constexpr double PIECE_SQUARE_TABLES[12][8][8] = { { {0, 0, 0, 0, 0, 0, 0, 0},
                                                              {0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5},
                                                              {0.1, 0.1, 0.2, 0.3, 0.3, 0.2, 0.1, 0.1},
                                                              {0.05, 0.05, 0.1, 0.25, 0.25, 0.1, 0.05, 0.05},
                                                              {0, 0, 0, 0.2, 0.2, 0, 0, 0},
                                                              {0.05, -0.05, -0.1, 0, 0, -0.1, -0.05, 0.05},
                                                              {0.05, 0.1, 0.1, -0.2, -0.2, 0.1, 0.1, 0.05},
                                                              {0, 0, 0, 0, 0, 0, 0, 0} },
                                                            { {0, 0, 0, 0, 0, 0, 0, 0},
                                                              {0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5},
                                                              {0.1, 0.1, 0.2, 0.3, 0.3, 0.2, 0.1, 0.1},
                                                              {0.05, 0.05, 0.1, 0.25, 0.25, 0.1, 0.05, 0.05},
                                                              {0, 0, 0, 0.2, 0.2, 0, 0, 0},
                                                              {0.05, -0.05, -0.1, 0, 0, -0.1, -0.05, 0.05},
                                                              {0.05, 0.1, 0.1, -0.2, -0.2, 0.1, 0.1, 0.05},
                                                              {0, 0, 0, 0, 0, 0, 0, 0} },
                                                            { {-0.5, -0.4, -0.3, -0.3, -0.3, -0.3, -0.4, -0.5},
                                                              {-0.4, -0.2, 0, 0, 0, 0, -0.2, -0.4},
                                                              {-0.3, 0, 0.1, 0.15, 0.15, 0.1, 0, -0.3},
                                                              {-0.3, 0.05, 0.15, 0.2, 0.2, 0.15, 0.05, -0.3},
                                                              {-0.3, 0, 0.15, 0.2, 0.2, 0.15, 0, -0.3},
                                                              {-0.3, 0.05, 0.1, 0.15, 0.15, 0.1, 0.05, -0.3},
                                                              {-0.4, -0.2, 0, 0.05, 0.05, 0, -0.2, -0.4},
                                                              {-0.5, -0.4, -0.3, -0.3, -0.3, -0.3, -0.4, -0.5} },
                                                            { {-0.5, -0.4, -0.3, -0.3, -0.3, -0.3, -0.4, -0.5},
                                                              {-0.4, -0.2, 0, 0, 0, 0, -0.2, -0.4},
                                                              {-0.3, 0, 0.1, 0.15, 0.15, 0.1, 0, -0.3},
                                                              {-0.3, 0.05, 0.15, 0.2, 0.2, 0.15, 0.05, -0.3},
                                                              {-0.3, 0, 0.15, 0.2, 0.2, 0.15, 0, -0.3},
                                                              {-0.3, 0.05, 0.1, 0.15, 0.15, 0.1, 0.05, -0.3},
                                                              {-0.4, -0.2, 0, 0.05, 0.05, 0, -0.2, -0.4},
                                                              {-0.5, -0.4, -0.3, -0.3, -0.3, -0.3, -0.4, -0.5} },
                                                            { {-0.2, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.2},
                                                              {-0.1, 0, 0, 0, 0, 0, 0, -0.1},
                                                              {-0.1, 0, 0.05, 0.1, 0.1, 0.05, 0, -0.1},
                                                              {-0.1, 0.05, 0.05, 0.1, 0.1, 0.05, 0.05, -0.1},
                                                              {-0.1, 0, 0.1, 0.1, 0.1, 0.1, 0, -0.1},
                                                              {-0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, -0.1},
                                                              {-0.1, 0.05, 0, 0, 0, 0, 0.05, -0.1},
                                                              {-0.2, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.2} },
                                                            { {-0.2, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.2},
                                                              {-0.1, 0, 0, 0, 0, 0, 0, -0.1},
                                                              {-0.1, 0, 0.05, 0.1, 0.1, 0.05, 0, -0.1},
                                                              {-0.1, 0.05, 0.05, 0.1, 0.1, 0.05, 0.05, -0.1},
                                                              {-0.1, 0, 0.1, 0.1, 0.1, 0.1, 0, -0.1},
                                                              {-0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, -0.1},
                                                              {-0.1, 0.05, 0, 0, 0, 0, 0.05, -0.1},
                                                              {-0.2, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.2} },
                                                            { {0, 0, 0, 0, 0, 0, 0, 0},
                                                              {0.05, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.05},
                                                              {-0.05, 0, 0, 0, 0, 0, 0, -0.05},
                                                              {-0.05, 0, 0, 0, 0, 0, 0, -0.05},
                                                              {-0.05, 0, 0, 0, 0, 0, 0, -0.05},
                                                              {-0.05, 0, 0, 0, 0, 0, 0, -0.05},
                                                              {-0.05, 0, 0, 0, 0, 0, 0, -0.05},
                                                              {0, 0, 0, 0.05, 0.05, 0, 0, 0} },
                                                            { {0, 0, 0, 0, 0, 0, 0, 0},
                                                              {0.05, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.05},
                                                              {-0.05, 0, 0, 0, 0, 0, 0, -0.05},
                                                              {-0.05, 0, 0, 0, 0, 0, 0, -0.05},
                                                              {-0.05, 0, 0, 0, 0, 0, 0, -0.05},
                                                              {-0.05, 0, 0, 0, 0, 0, 0, -0.05},
                                                              {-0.05, 0, 0, 0, 0, 0, 0, -0.05},
                                                              {0, 0, 0, 0.05, 0.05, 0, 0, 0} },
                                                            { {-0.2, -0.1, -0.1, -0.05, -0.05, -0.1, -0.1, -0.2},
                                                              {-0.1, 0, 0, 0, 0, 0, 0, -0.1},
                                                              {-0.1, 0, 0.05, 0.05, 0.05, 0.05, 0, -0.1},
                                                              {-0.05, 0, 0.05, 0.05, 0.05, 0.05, 0, -0.05},
                                                              {0, 0, 0.05, 0.05, 0.05, 0.05, 0, -0.05},
                                                              {-0.1, 0.05, 0.05, 0.05, 0.05, 0.05, 0, -0.1},
                                                              {-0.1, 0, 0.05, 0, 0, 0, 0, -0.1},
                                                              {-0.2, -0.1, -0.1, -0.05, -0.05, -0.1, -0.1, -0.2} },
                                                            { {-0.2, -0.1, -0.1, -0.05, -0.05, -0.1, -0.1, -0.2},
                                                              {-0.1, 0, 0, 0, 0, 0, 0, -0.1},
                                                              {-0.1, 0, 0.05, 0.05, 0.05, 0.05, 0, -0.1},
                                                              {-0.05, 0, 0.05, 0.05, 0.05, 0.05, 0, -0.05},
                                                              {0, 0, 0.05, 0.05, 0.05, 0.05, 0, -0.05},
                                                              {-0.1, 0.05, 0.05, 0.05, 0.05, 0.05, 0, -0.1},
                                                              {-0.1, 0, 0.05, 0, 0, 0, 0, -0.1},
                                                              {-0.2, -0.1, -0.1, -0.05, -0.05, -0.1, -0.1, -0.2} },
                                                            { {-0.3, -0.4, -0.4, -0.5, -0.5, -0.4, -0.4, -0.3},
                                                              {-0.3, -0.4, -0.4, -0.5, -0.5, -0.4, -0.4, -0.3},
                                                              {-0.3, -0.4, -0.4, -0.5, -0.5, -0.4, -0.4, -0.3},
                                                              {-0.3, -0.4, -0.4, -0.5, -0.5, -0.4, -0.4, -0.3},
                                                              {-0.2, -0.3, -0.3, -0.4, -0.4, -0.3, -0.3, -0.2},
                                                              {-0.1, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.1},
                                                              {0.2, 0.2, 0, 0, 0, 0, 0.2, 0.2},
                                                              {0.2, 0.3, 0.1, 0, 0, 0.1, 0.3, 0.2} },
                                                            { {-0.5, -0.4, -0.3, -0.2, -0.2, -0.3, -0.4, -0.5},
                                                              {-0.3, -0.2, -0.1, 0, 0, -0.1, -0.2, -0.3},
                                                              {-0.3, -0.1, 0.2, 0.3, 0.3, 0.2, -0.1, -0.3},
                                                              {-0.3, -0.1, 0.3, 0.4, 0.4, 0.3, -0.1, -0.3},
                                                              {-0.3, -0.1, 0.3, 0.4, 0.4, 0.3, -0.1, -0.3},
                                                              {-0.3, -0.1, 0.2, 0.3, 0.3, 0.2, -0.1, -0.3},
                                                              {-0.3, -0.3, 0, 0, 0, 0, -0.3, -0.3},
                                                              {-0.5, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.5} } };
    static unordered_map<char, int> pieceToIndex;
public:
    static double getAdjustedPawnEquivalent(State& state, int i, int j);
    static double getEvaluation(State& state);
    static double getMaximumEvaluation();
    static int getPawnEquivalent(char piece);
};
